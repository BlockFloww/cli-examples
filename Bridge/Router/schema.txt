{
  blocktimestamp: Number,
  blockNumber: Number,
  chainId: String,
  transactionHash: String,
  sourcetoken: {
    address: String,
    amount: String,
    symbol: String,
  },
  stableToken: {
    address: String,
    amount: String,
    symbol: String,
  },
  depositorAddress: String, // Contract from where txn came
  senderAddress: String, // Who triggered the transaction
  depositId: String,
  messageHash: String,
  partnerId: String,
  message: String,
  usdValue: String,
};
  
  //Destination
  {
    blocktimestamp: Number,
    blockNumber: Number,
    chainId: String,
    transactionHash: String,
    destnationtoken: {
      address: String,
      amount: String,
      symbol: String,
    },
    stableToken: {
      address: String,
      amount: String,
      symbol: String,
    },
    recipientAddress: String, // Contract from where txn came
    receiverAddress: String, // Who received the funds
    paidId: String,
    forwarderAddress: String,
    messageHash: String,
    execFlag: Boolean,
    execData: String,
    usdValue: String,
  };
  
  //Fee Info
  {
    feeToken: {
      address: String,
      amount: String,
      symbol: String,
    },
    usdValue: String,
  };
  
  //Deposit Info Update Info
  {
    updateId: String,
    isWithdraw: Boolean,
    transactionHash: String,
    refundOutboundId: String,
  };
  
  //Refuel Info
  {
    nativeToken: {
      amount: String,
      symbol: String,
    },
  };
  
  //Extra Info
  {
    flowType: String, //Either Asset Forwarder or Asset bridge or Circle flow or Same chain Swap
    gasFeeUsd: String,
    bridgeFeeUsd: String,
    competitorData: {
      fee: {
        gasFeeUsd: String,
        bridgeFeeUsd: String,
      },
      time: String,
    },
    // Partner info from middle-ware contract
    sys_fee: String,
    partner_fee: String,
    forwarder_fee: String,
    expiry_timestamp: Number,
  };