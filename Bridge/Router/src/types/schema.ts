// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { Document } from "@blockflow-labs/utils";

export class Destination {
  static entity = "Destination";
  static schema = {
    blocktimestamp: "Number",
    blockNumber: "Number",
    chainId: { type: "String", index: true },
    transactionHash: "String",
    destnationtoken: { address: "String", amount: "String", symbol: "String" },
    stableToken: { address: "String", amount: "String", symbol: "String" },
    paidId: "String",
    forwarderAddress: "String",
    messageHash: "String",
    execData: "String",
    usdValue: "String",
    id: { type: "String", index: true },
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
  };
}

export class Source {
  static entity = "Source";
  static schema = {
    blocktimestamp: "Number",
    blockNumber: "Number",
    chainId: { type: "String", index: true },
    transactionHash: "String",
    sourcetoken: { address: "String", amount: "String", symbol: "String" },
    stableToken: { address: "String", amount: "String", symbol: "String" },
    depositId: "String",
    messageHash: "String",
    partnerId: "String",
    message: "String",
    usdValue: "String",
    id: { type: "String", index: true },
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
  };
}

export class FeeInfo {
  static entity = "FeeInfo";
  static schema = {
    id: { type: "String", index: true },
    feeToken: { address: "String", amount: "String", symbol: "String" },
    usdValue: "String",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
  };
}

export class DepositInfoUpdate {
  static entity = "DepositInfoUpdate";
  static schema = {
    id: { type: "String", index: true },
    isWithdraw: "Boolean",
    transactionHash: "String",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
  };
}

export class RefuelInfo {
  static entity = "RefuelInfo";
  static schema = {
    id: { type: "String", index: true },
    nativeToken: { amount: "String", symbol: "String" },
    nativeRecipient: "String",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
  };
}

export class ExtraInfo {
  static entity = "ExtraInfo";
  static schema = {
    id: { type: "String", index: true },
    gasFeeUsd: "String",
    bridgeFeeUsd: "String",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
  };
}

type native = {
  amount: String;
  symbol: String;
};

type Token = {
  address: String;
  amount: String;
  symbol: String;
};

export interface IDestination extends Document {
  id: String; // message hash
  blocktimestamp: Number;
  blockNumber: Number;
  chainId: String;
  transactionHash: String;
  destnationtoken: Token;
  stableToken: Token;
  recipientAddress: String; // Contract from where txn came
  receiverAddress: String; // Who received the funds
  paidId: String;
  forwarderAddress: String;
  messageHash: String;
  execFlag: Boolean; // for swap related transaction
  execData: String;
  usdValue: String;
  blocknumber: String;
  entityId: String;
}

export interface ISource extends Document {
  id: String; // message hash
  blocktimestamp: Number;
  blockNumber: Number;
  chainId: String;
  transactionHash: String;
  sourcetoken: Token;
  stableToken: Token;
  depositorAddress: String; // Contract from where txn came
  senderAddress: String; // Who triggered the transaction
  depositId: String;
  messageHash: String;
  partnerId: String;
  message: String;
  usdValue: String;
  blocknumber: String;
  entityId: String;
}

// difference between src and destination
export interface IFeeInfo extends Document {
  id: String;
  feeToken: Token;
  usdValue: String;
  blocknumber: String;
  entityId: String;
  chainId: String;
}

//DepositInfoUpdate
export interface IDepositInfoUpdate extends Document {
  id: String;
  updateId: String; // eventNonce
  isWithdraw: Boolean;
  transactionHash: String;
  refundOutboundId: String; // NA
  blocknumber: String;
  entityId: String;
  chainId: String;
}

// GasLeaked, emitted with fundPaidWithMessage
export interface IRefuelInfo extends Document {
  id: String;
  nativeToken: native;
  nativeRecipient: String;
  blocknumber: String;
  entityId: String;
  chainId: String;
}

type competitorData = {
  gasFeeUsd: String;
  bridgeFeeUsd: String;
  time: String;
};

export interface IExtraInfo extends Document {
  id: String;
  flowType: String; //Either Asset Forwarder or Asset bridge or Circle flow or Same chain Swap
  gasFeeUsd: String;
  bridgeFeeUsd: String;
  // competitorData: competitorData;
  // Partner info from middle-ware contract
  // sys_fee: String;
  // partner_fee: String;
  // forwarder_fee: String;
  // expiry_timestamp: Number;
  blocknumber: String;
  entityId: String;
  chainId: String;
}
